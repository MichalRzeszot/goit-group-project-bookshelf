{"mappings":"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","sources":["<anon>","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js","node_modules/@parcel/runtime-js/lib/runtime-f645ce720bf1a21c.js","src/js/shopping-list.mjs","node_modules/@parcel/runtime-js/lib/runtime-56cb2f07f425f555.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n      var $parcel$global = globalThis;\n    \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequired7c6\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequired7c6\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ifJdc\", function(module, exports) {\n\n$parcel$export(module.exports, \"register\", () => $d49cb2d7b03f6a77$export$6503ec6e8aabbaf, (v) => $d49cb2d7b03f6a77$export$6503ec6e8aabbaf = v);\nvar $d49cb2d7b03f6a77$export$6503ec6e8aabbaf;\nvar $d49cb2d7b03f6a77$export$f7ad0328861e2f03;\n\"use strict\";\nvar $d49cb2d7b03f6a77$var$mapping = new Map();\nfunction $d49cb2d7b03f6a77$var$register(baseUrl, manifest) {\n    for(var i = 0; i < manifest.length - 1; i += 2)$d49cb2d7b03f6a77$var$mapping.set(manifest[i], {\n        baseUrl: baseUrl,\n        path: manifest[i + 1]\n    });\n}\nfunction $d49cb2d7b03f6a77$var$resolve(id) {\n    var resolved = $d49cb2d7b03f6a77$var$mapping.get(id);\n    if (resolved == null) throw new Error(\"Could not resolve bundle with id \" + id);\n    return new URL(resolved.path, resolved.baseUrl).toString();\n}\n$d49cb2d7b03f6a77$export$6503ec6e8aabbaf = $d49cb2d7b03f6a77$var$register;\n$d49cb2d7b03f6a77$export$f7ad0328861e2f03 = $d49cb2d7b03f6a77$var$resolve;\n\n});\n\nvar $f9965c57efb58117$exports = {};\n\n(parcelRequire(\"ifJdc\")).register(new URL(\"\", import.meta.url).toString(), JSON.parse('[\"ix1sq\",\"index.18442033.js\",\"GcmPC\",\"icons.fe5062d9.svg\"]'));\n\nvar $5784edd5ce62c73d$exports = {};\n$5784edd5ce62c73d$exports = new URL(\"icons.fe5062d9.svg\", import.meta.url).toString();\n\n\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    // Sprawdzam, czy localStorage zawiera dane o książkach w koszyku lub zwracam pustą tablicę, jeśli w local storage nic nie ma\n    const shoppingListData = JSON.parse(localStorage.getItem(\"shoppingList\")) || [];\n    const shoppingListContainer = document.getElementById(\"shopping-list\");\n    const navigationButtons = document.querySelectorAll(\".navigation-button\");\n    const itemsPerPage = 3;\n    let currentPage = 1;\n    function updateTotalPages() {\n        totalPages = Math.ceil(shoppingListData.length / itemsPerPage);\n    }\n    function displayBooks(page) {\n        shoppingListContainer.innerHTML = \"\"; // Clear previous content\n        const startIndex = (page - 1) * itemsPerPage;\n        const endIndex = startIndex + itemsPerPage;\n        const booksToDisplay = shoppingListData.slice(startIndex, endIndex);\n        booksToDisplay.forEach((book)=>{\n            const bookCard = createBookCard(book);\n            shoppingListContainer.appendChild(bookCard);\n        });\n    }\n    function createPagination() {\n        const paginationContainer = document.getElementById(\"pages\");\n        paginationContainer.innerHTML = \"\";\n        updateTotalPages();\n        for(let i = 1; i <= totalPages; i++){\n            const pageButton = document.createElement(\"button\");\n            pageButton.innerText = i;\n            pageButton.classList.add(\"page-button\");\n            pageButton.addEventListener(\"click\", function() {\n                currentPage = i;\n                displayBooks(currentPage);\n                updateButtonStyles();\n            });\n            paginationContainer.appendChild(pageButton);\n        }\n        const firstPageBtn = document.getElementById(\"first-page\");\n        firstPageBtn.addEventListener(\"click\", function() {\n            currentPage = 1;\n            displayBooks(currentPage);\n            updateButtonStyles();\n        });\n        const lastPageBtn = document.getElementById(\"last-page\");\n        lastPageBtn.addEventListener(\"click\", function() {\n            currentPage = totalPages;\n            displayBooks(currentPage);\n            updateButtonStyles();\n        });\n        const prevPageBtn = document.getElementById(\"previous-page\");\n        prevPageBtn.addEventListener(\"click\", function() {\n            if (currentPage > 1) {\n                currentPage--;\n                displayBooks(currentPage);\n                updateButtonStyles();\n            }\n        });\n        const nextPageBtn = document.getElementById(\"next-page\");\n        nextPageBtn.addEventListener(\"click\", function() {\n            if (currentPage < totalPages) {\n                currentPage++;\n                displayBooks(currentPage);\n                updateButtonStyles();\n            }\n        });\n        function updateButtonStyles() {\n            const buttons = document.querySelectorAll(\".page-button\");\n            buttons.forEach((button, index)=>{\n                if (index + 1 === currentPage) {\n                    button.style.backgroundColor = \"var(--black)\";\n                    button.style.color = \"var(--white)\";\n                } else {\n                    button.style.backgroundColor = \"\";\n                    button.style.color = \"\";\n                }\n            });\n        }\n        updateButtonStyles();\n    }\n    function displayNavigationButtons(shouldDisplay) {\n        navigationButtons.forEach((button)=>{\n            button.style.display = shouldDisplay ? \"inline-block\" : \"none\";\n        });\n    }\n    if (shoppingListData.length === 0) {\n        shoppingListContainer.innerHTML = '<p class=\"sl-paragraph\">This page is empty, add some books and proceed to order.</p>';\n        displayNavigationButtons(false);\n    } else {\n        displayNavigationButtons(true);\n        displayBooks(currentPage);\n        createPagination();\n    }\n    // if (shoppingListData.length === 0) {\n    //   // Wyświetlam komunikat w przypadku, jeśli koszyk jest pusty\n    //   shoppingListContainer.innerHTML =\n    //     '<p class=\"sl-paragraph\">This page is empty, add some books and proceed to order.</p>';\n    // } else {\n    //   // Wyświetlam każdą książkę z koszyka\n    //   shoppingListData.forEach(book => {\n    //     const bookCard = createBookCard(book);\n    //     shoppingListContainer.appendChild(bookCard);\n    //   });\n    // }\n    // Tworzę kartę dla książki w koszyku\n    function createBookCard(book) {\n        const card = document.createElement(\"div\");\n        card.classList.add(\"book-card-container\");\n        // Dodaję wymagane informacje o książce\n        card.innerHTML = `\n    <div>\n    <img class=\"book-image\" src=\"${book.book_image}\" alt=\"${book.title} Cover\"/>\n   </div>\n\n   <div class=\"text-container\">\n   <div class=\"card-book-data-container\">\n       <div class=\"book-card-header\">\n             <div class=\"card-title-container\">\n                    <p class=\"book-title\">${book.title}</p>\n                    <p class=\"book-category\">${book.list_name}</p>\n             </div>\n             <div>\n                   <button class=\"remove-button\" onclick=\"removeFromShoppingList('${book._id}')\">\n                   <div class=\"remove-button-item\">\n                   <svg>\n                   <use href=\"${0, (/*@__PURE__*/$parcel$interopDefault($5784edd5ce62c73d$exports))}\"></use></svg></div>\n                   <!--<use href=\"./images/icons.svg#icon-trash-03\"></use></svg></div>-->\n                   </button>\n             </div>   \n       </div> \n       <div class=\"book-description\">${book.description}</div>\n    </div>\n \n   <div class=\"card-book-footer\">\n       <div class=\"book-author\">${book.author}</div>\n       <div class=\"purchase-links\">\n        <a class=\"amazon-icon\" href=\"${book.amazon_product_url}\">\n           <svg>\n           <use href=\"/src/images/icons.svg#icon-amazon\"></use></svg></a>\n        <a href=\"${book.buy_links[1].url}\"><svg width=\"16\" height=\"16\">\n        <use href=\"/src/images/icons.svg#icon-book-icon\"></use></a>\n       </div> \n   </div>\n </div>`;\n        return card;\n    }\n    function removeFromShoppingList(bookId) {\n        const updatedShoppingList = shoppingListData.filter((book)=>book._id !== bookId);\n        localStorage.setItem(\"shoppingList\", JSON.stringify(updatedShoppingList));\n        location.reload();\n    }\n    //funkcja do usuwania książki z koszyka\n    document.removeFromShoppingList = function(bookId) {\n        //Funkcja filter() zwraca nową tablicę, która zawiera odfiltrowane elementy\n        const updatedShoppingList = shoppingListData.filter((book)=>book._id !== bookId);\n        //Zapisuję zaktualizowaną listę zakupów do localStorage pod kluczem \"shoppingList\"\n        localStorage.setItem(\"shoppingList\", JSON.stringify(updatedShoppingList));\n        // Przeładuj stronę, aby odświeżyć listę. Bez tego kroku użytkownik musiałby samodzielnie odświeżyć stronę, żeby zobaczyć zmiany.\n        location.reload();\n    };\n});\n\n\n//# sourceMappingURL=index.18442033.js.map\n","\"use strict\";\n\nvar mapping = new Map();\nfunction register(baseUrl, manifest) {\n  for (var i = 0; i < manifest.length - 1; i += 2) {\n    mapping.set(manifest[i], {\n      baseUrl: baseUrl,\n      path: manifest[i + 1]\n    });\n  }\n}\nfunction resolve(id) {\n  var resolved = mapping.get(id);\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n  return new URL(resolved.path, resolved.baseUrl).toString();\n}\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;","require('./helpers/bundle-manifest').register(new __parcel__URL__(\"\").toString(),JSON.parse(\"[\\\"ix1sq\\\",\\\"index.18442033.js\\\",\\\"GcmPC\\\",\\\"icons.fe5062d9.svg\\\"]\"));","import trashIcon from './../images/icons.svg#icon-trash-03'; \n\ndocument.addEventListener('DOMContentLoaded', function () {\n  // Sprawdzam, czy localStorage zawiera dane o książkach w koszyku lub zwracam pustą tablicę, jeśli w local storage nic nie ma\n  const shoppingListData = JSON.parse(localStorage.getItem('shoppingList')) || [];\n  const shoppingListContainer = document.getElementById('shopping-list');\n  const navigationButtons = document.querySelectorAll('.navigation-button');\n  const itemsPerPage = 3;\n  let currentPage = 1;\n\n  function updateTotalPages() {\n    totalPages = Math.ceil(shoppingListData.length / itemsPerPage);\n  }\n\n  function displayBooks(page) {\n    shoppingListContainer.innerHTML = ''; // Clear previous content\n\n    const startIndex = (page - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const booksToDisplay = shoppingListData.slice(startIndex, endIndex);\n\n    booksToDisplay.forEach(book => {\n      const bookCard = createBookCard(book);\n      shoppingListContainer.appendChild(bookCard);\n    });\n  }\n\n  function createPagination() {\n    const paginationContainer = document.getElementById('pages');\n    paginationContainer.innerHTML = '';\n\n    updateTotalPages();\n\n    for (let i = 1; i <= totalPages; i++) {\n      const pageButton = document.createElement('button');\n      pageButton.innerText = i;\n      pageButton.classList.add('page-button');\n      pageButton.addEventListener('click', function () {\n        currentPage = i;\n        displayBooks(currentPage);\n        updateButtonStyles();\n      });\n      paginationContainer.appendChild(pageButton);\n    }\n\n    const firstPageBtn = document.getElementById('first-page');\n    firstPageBtn.addEventListener('click', function () {\n      currentPage = 1;\n      displayBooks(currentPage);\n      updateButtonStyles();\n    });\n\n    const lastPageBtn = document.getElementById('last-page');\n    lastPageBtn.addEventListener('click', function () {\n      currentPage = totalPages;\n      displayBooks(currentPage);\n      updateButtonStyles();\n    });\n\n    const prevPageBtn = document.getElementById('previous-page');\n    prevPageBtn.addEventListener('click', function () {\n      if (currentPage > 1) {\n        currentPage--;\n        displayBooks(currentPage);\n        updateButtonStyles();\n      }\n    });\n\n    const nextPageBtn = document.getElementById('next-page');\n    nextPageBtn.addEventListener('click', function () {\n      if (currentPage < totalPages) {\n        currentPage++;\n        displayBooks(currentPage);\n        updateButtonStyles();\n      }\n    });\n\n    function updateButtonStyles() {\n      const buttons = document.querySelectorAll('.page-button');\n\n      buttons.forEach((button, index) => {\n        if (index + 1 === currentPage) {\n          button.style.backgroundColor = 'var(--black)';\n          button.style.color = 'var(--white)';\n        } else {\n          button.style.backgroundColor = '';\n          button.style.color = '';\n        }\n      });\n    }\n\n    updateButtonStyles();\n  }\n\n  function displayNavigationButtons(shouldDisplay) {\n    navigationButtons.forEach(button => {\n      button.style.display = shouldDisplay ? 'inline-block' : 'none';\n    });\n  }\n\n  if (shoppingListData.length === 0) {\n    shoppingListContainer.innerHTML =\n      '<p class=\"sl-paragraph\">This page is empty, add some books and proceed to order.</p>';\n    displayNavigationButtons(false);\n  } else {\n    displayNavigationButtons(true);\n    displayBooks(currentPage);\n    createPagination();\n  }\n\n  // if (shoppingListData.length === 0) {\n  //   // Wyświetlam komunikat w przypadku, jeśli koszyk jest pusty\n  //   shoppingListContainer.innerHTML =\n  //     '<p class=\"sl-paragraph\">This page is empty, add some books and proceed to order.</p>';\n  // } else {\n  //   // Wyświetlam każdą książkę z koszyka\n  //   shoppingListData.forEach(book => {\n  //     const bookCard = createBookCard(book);\n  //     shoppingListContainer.appendChild(bookCard);\n  //   });\n  // }\n\n  // Tworzę kartę dla książki w koszyku\n  function createBookCard(book) {\n    const card = document.createElement('div');\n    card.classList.add('book-card-container');\n\n    // Dodaję wymagane informacje o książce\n    card.innerHTML = `\n    <div>\n    <img class=\"book-image\" src=\"${book.book_image}\" alt=\"${book.title} Cover\"/>\n   </div>\n\n   <div class=\"text-container\">\n   <div class=\"card-book-data-container\">\n       <div class=\"book-card-header\">\n             <div class=\"card-title-container\">\n                    <p class=\"book-title\">${book.title}</p>\n                    <p class=\"book-category\">${book.list_name}</p>\n             </div>\n             <div>\n                   <button class=\"remove-button\" onclick=\"removeFromShoppingList('${book._id}')\">\n                   <div class=\"remove-button-item\">\n                   <svg>\n                   <use href=\"${trashIcon}\"></use></svg></div>\n                   <!--<use href=\"./images/icons.svg#icon-trash-03\"></use></svg></div>-->\n                   </button>\n             </div>   \n       </div> \n       <div class=\"book-description\">${book.description}</div>\n    </div>\n \n   <div class=\"card-book-footer\">\n       <div class=\"book-author\">${book.author}</div>\n       <div class=\"purchase-links\">\n        <a class=\"amazon-icon\" href=\"${book.amazon_product_url}\">\n           <svg>\n           <use href=\"/src/images/icons.svg#icon-amazon\"></use></svg></a>\n        <a href=\"${book.buy_links[1].url}\"><svg width=\"16\" height=\"16\">\n        <use href=\"/src/images/icons.svg#icon-book-icon\"></use></a>\n       </div> \n   </div>\n </div>`;\n    return card;\n  }\n\n  function removeFromShoppingList(bookId) {\n    const updatedShoppingList = shoppingListData.filter(book => book._id !== bookId);\n    localStorage.setItem('shoppingList', JSON.stringify(updatedShoppingList));\n    location.reload();\n  }\n\n  //funkcja do usuwania książki z koszyka\n  document.removeFromShoppingList = function (bookId) {\n    //Funkcja filter() zwraca nową tablicę, która zawiera odfiltrowane elementy\n    const updatedShoppingList = shoppingListData.filter(book => book._id !== bookId);\n\n    //Zapisuję zaktualizowaną listę zakupów do localStorage pod kluczem \"shoppingList\"\n    localStorage.setItem('shoppingList', JSON.stringify(updatedShoppingList));\n    // Przeładuj stronę, aby odświeżyć listę. Bez tego kroku użytkownik musiałby samodzielnie odświeżyć stronę, żeby zobaczyć zmiany.\n    location.reload();\n  };\n});\n","module.exports = new __parcel__URL__(\"icons.fe5062d9.svg\").toString();"],"names":["$parcel$global","globalThis","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","Object","defineProperty","get","$d49cb2d7b03f6a77$export$6503ec6e8aabbaf","set","v","enumerable","configurable","$d49cb2d7b03f6a77$var$mapping","Map","baseUrl","manifest","i","length","path","URL","url","toString","JSON","parse","$5784edd5ce62c73d$exports","document","addEventListener","shoppingListData","localStorage","getItem","shoppingListContainer","getElementById","navigationButtons","querySelectorAll","currentPage","displayBooks","page","innerHTML","startIndex","booksToDisplay","slice","forEach","book","bookCard","createBookCard","a","card","createElement","classList","add","book_image","title","list_name","_id","__esModule","default","description","author","amazon_product_url","buy_links","appendChild","displayNavigationButtons","shouldDisplay","button","style","display","createPagination","paginationContainer","totalPages","Math","ceil","pageButton","innerText","updateButtonStyles","buttons","index","backgroundColor","color","firstPageBtn","lastPageBtn","prevPageBtn","nextPageBtn","removeFromShoppingList","bookId","updatedShoppingList","filter","setItem","stringify","location","reload"],"version":3,"file":"index.18442033.js.map"}